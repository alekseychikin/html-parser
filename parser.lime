%class template_parser
%start doc

%left TK_COMMA
%left TK_MINUS
%left TK_PLUS
%left TK_LT
%left TK_GT
%left TK_ASSIGMENT
%left TK_EQUAL
%left TK_NOT_EQUAL
%left TK_LT_EQUAL
%left TK_GT_EQUAL
%left TK_LOGIC_AND
%left TK_LOGIC_OR
%left TK_PIPE
%left TK_TWO_DOTS

doc
= lines
  { ParserE::saveResults($1); }
.

lines
= line_element
  { $$ = array($1); }
| lines line_element
  { $1[] = $2; $$ = $1; }
.

line_element
= tag
| text_node
  {$$ = new TextNode($1); }
| logic_node
.

tag
= TK_LT tag_name attributes GT
  { $$ = new Tag($2, 'open'); $$->setAttributes($3); }
| TK_LT TK_SLASH tag_name GT
  { $$ = new Tag($3, 'close'); }
.

mb_space
=
| TK_SPACE
.

tag_name
= TK_LETTERS
| tag_name TK_COLON TK_LETTERS
  { $$ = $1 . $2 . $3; }
.

GT
= TK_SLASH TK_GT
| TK_SPACE TK_SLASH TK_GT
| TK_GT
| TK_SPACE TK_GT
.

attributes
=
  { $$ = array(); }
| attributes TK_SPACE attribute
  { $1[] = $3; $$ = $1; }
.

attribute
= attrib_name attrib_value
  { $$ = new Attribute($1, $2); }
.

attrib_value
=
  { $$ = ""; }
| TK_ASSIGMENT TK_DOUBLE_QUOTE TK_DOUBLE_QUOTE
  { $$ = ""; }
| TK_ASSIGMENT TK_SINGLE_QUOTE TK_SINGLE_QUOTE
  { $$ = ""; }
| TK_ASSIGMENT string
  { $$ = $2; }
| TK_ASSIGMENT TAG_NAME
  { $$ = $2; }
| TK_ASSIGMENT TK_DIGITS
  { $$ = $2; }
| TK_ASSIGMENT TK_OTHER
  { $$ = $2; }
.

string
= TK_DOUBLE_QUOTE string_elements TK_DOUBLE_QUOTE
  { $$ = $2; }
| TK_SINGLE_QUOTE string_elements TK_SINGLE_QUOTE
  { $$ = $2; }
.

string_elements
= string_element
  { $$ = array($1); }
| string_elements string_element
  { $1[] = $2; $$ = $1; }
.

string_element
= text
.

attrib_name
= TK_LETTERS
| attrib_name TK_MINUS TK_LETTERS
  { $$ = $1 . $2 . $3; }
.

text_node
= text_node_element
| text_node text_node_element
  { $$ = $1 . $2; }
.

text_node_element
= text
| TK_SINGLE_QUOTE
| TK_DOUBLE_QUOTE
.

logic_node
= TK_LOGIC_BEGIN mb_space expr_words TK_LOGIC_END
  { $$ = new LogicNode($2); }
.

expr_words
= expr_element
  { $$ = array(array('value' => $1, 'type' => 'expr')); }
| expr_words TK_COMMA expr_element
  { $1[] = array('value' => $2, 'type' => 'expr'); $$ = $1; }
.

expr_element
= assignment
.

assignment
= complex_var
.

complex_var
= var mb_space
| complex_var brackets
.

brackets
= bracket
| brackets bracket
.

bracket
= TK_SQUARE_BRAKETS_OPEN mb_space index TK_SQUARE_BRAKETS_CLOSE mb_space
.

index
= TK_DIGITS mb_space
| complex_var
.

var
= var_first_letter
| var var_first_letter
  { $$ = $1 . $2; }
| var TK_DIGITS
  { $$ = $1 . $2; }
.

var_first_letter
= TK_LETTERS
| TK_UNDERSCORE
| TK_BAKS
.

text
= TK_DIGITS
| TK_MINUS
| TK_PLUS
| TK_MULTIPLY
| TK_LT_EQUAL
| TK_GT_EQUAL
| TK_LT
| TK_GT
| TK_LETTERS
| TK_SLASH
| TK_EQUAL
| TK_COMMA
| TK_COLON
| TK_DOT
| TK_BAKS
| TK_EXCLAMATION_MARK
| TK_FIGURE_BRAKETS_OPEN
| TK_FIGURE_BRAKETS_CLOSE
| TK_BRAKETS_OPEN
| TK_BRAKETS_CLOSE
| TK_SQUARE_BRAKETS_OPEN
| TK_SQUARE_BRAKETS_CLOSE
| TK_UNDERSCORE
| TK_ASSIGMENT
| TK_NOT_EQUAL
| TK_SPACE
| TK_OTHER
.
